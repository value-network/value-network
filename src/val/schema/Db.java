/*
 * This file is generated by jOOQ.
 */
package val.schema;


import org.jooq.Catalog;
import org.jooq.Table;
import org.jooq.impl.SchemaImpl;
import val.schema.tables.*;

import javax.annotation.Generated;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.10.5"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Db extends SchemaImpl {

    /**
     * The reference instance of <code>DB</code>
     */
    public static final Db DB = new Db();
    private static final long serialVersionUID = 1636763333;
    /**
     * The table <code>DB.account</code>.
     */
    public final Account ACCOUNT = val.schema.tables.Account.ACCOUNT;

    /**
     * The table <code>DB.account_asset</code>.
     */
    public final AccountAsset ACCOUNT_ASSET = val.schema.tables.AccountAsset.ACCOUNT_ASSET;

    /**
     * The table <code>DB.alias</code>.
     */
    public final Alias ALIAS = val.schema.tables.Alias.ALIAS;

    /**
     * The table <code>DB.alias_offer</code>.
     */
    public final AliasOffer ALIAS_OFFER = val.schema.tables.AliasOffer.ALIAS_OFFER;

    /**
     * The table <code>DB.ask_order</code>.
     */
    public final AskOrder ASK_ORDER = val.schema.tables.AskOrder.ASK_ORDER;

    /**
     * The table <code>DB.asset</code>.
     */
    public final Asset ASSET = val.schema.tables.Asset.ASSET;

    /**
     * The table <code>DB.asset_transfer</code>.
     */
    public final AssetTransfer ASSET_TRANSFER = val.schema.tables.AssetTransfer.ASSET_TRANSFER;

    /**
     * The table <code>DB.at</code>.
     */
    public final At AT = val.schema.tables.At.AT;

    /**
     * The table <code>DB.at_state</code>.
     */
    public final AtState AT_STATE = val.schema.tables.AtState.AT_STATE;

    /**
     * The table <code>DB.bid_order</code>.
     */
    public final BidOrder BID_ORDER = val.schema.tables.BidOrder.BID_ORDER;

    /**
     * The table <code>DB.block</code>.
     */
    public final Block BLOCK = val.schema.tables.Block.BLOCK;

    /**
     * The table <code>DB.escrow</code>.
     */
    public final Escrow ESCROW = val.schema.tables.Escrow.ESCROW;

    /**
     * The table <code>DB.escrow_decision</code>.
     */
    public final EscrowDecision ESCROW_DECISION = val.schema.tables.EscrowDecision.ESCROW_DECISION;

    /**
     * The table <code>DB.global_parameter</code>.
     */
    public final GlobalParameter GLOBAL_PARAMETER = val.schema.tables.GlobalParameter.GLOBAL_PARAMETER;

    /**
     * The table <code>DB.goods</code>.
     */
    public final Goods GOODS = val.schema.tables.Goods.GOODS;

    /**
     * The table <code>DB.peer</code>.
     */
    public final Peer PEER = val.schema.tables.Peer.PEER;

    /**
     * The table <code>DB.pledges</code>.
     */
    public final Pledges PLEDGES = val.schema.tables.Pledges.PLEDGES;

    /**
     * The table <code>DB.pool_miner</code>.
     */
    public final PoolMiner POOL_MINER = val.schema.tables.PoolMiner.POOL_MINER;

    /**
     * The table <code>DB.purchase</code>.
     */
    public final Purchase PURCHASE = val.schema.tables.Purchase.PURCHASE;

    /**
     * The table <code>DB.purchase_feedback</code>.
     */
    public final PurchaseFeedback PURCHASE_FEEDBACK = val.schema.tables.PurchaseFeedback.PURCHASE_FEEDBACK;

    /**
     * The table <code>DB.purchase_public_feedback</code>.
     */
    public final PurchasePublicFeedback PURCHASE_PUBLIC_FEEDBACK = val.schema.tables.PurchasePublicFeedback.PURCHASE_PUBLIC_FEEDBACK;

    /**
     * The table <code>DB.reward_recip_assign</code>.
     */
    public final RewardRecipAssign REWARD_RECIP_ASSIGN = val.schema.tables.RewardRecipAssign.REWARD_RECIP_ASSIGN;

    /**
     * The table <code>DB.subscription</code>.
     */
    public final Subscription SUBSCRIPTION = val.schema.tables.Subscription.SUBSCRIPTION;

    /**
     * The table <code>DB.trade</code>.
     */
    public final Trade TRADE = val.schema.tables.Trade.TRADE;

    /**
     * The table <code>DB.transaction</code>.
     */
    public final Transaction TRANSACTION = val.schema.tables.Transaction.TRANSACTION;

    /**
     * The table <code>DB.unconfirmed_transaction</code>.
     */
    public final UnconfirmedTransaction UNCONFIRMED_TRANSACTION = val.schema.tables.UnconfirmedTransaction.UNCONFIRMED_TRANSACTION;

    /**
     * The table <code>DB.version</code>.
     */
    public final Version VERSION = val.schema.tables.Version.VERSION;

    /**
     * No further instances allowed
     */
    private Db() {
        super("DB", null);
    }


    /**
     * {@inheritDoc}
     */
    @Override
    public Catalog getCatalog() {
        return DefaultCatalog.DEFAULT_CATALOG;
    }

    @Override
    public final List<Table<?>> getTables() {
        List result = new ArrayList();
        result.addAll(getTables0());
        return result;
    }

    private final List<Table<?>> getTables0() {
        return Arrays.<Table<?>>asList(
                Account.ACCOUNT,
                AccountAsset.ACCOUNT_ASSET,
                Alias.ALIAS,
                AliasOffer.ALIAS_OFFER,
                AskOrder.ASK_ORDER,
                Asset.ASSET,
                AssetTransfer.ASSET_TRANSFER,
                At.AT,
                AtState.AT_STATE,
                BidOrder.BID_ORDER,
                Block.BLOCK,
                Escrow.ESCROW,
                EscrowDecision.ESCROW_DECISION,
                GlobalParameter.GLOBAL_PARAMETER,
                Goods.GOODS,
                Peer.PEER,
                Pledges.PLEDGES,
                PoolMiner.POOL_MINER,
                Purchase.PURCHASE,
                PurchaseFeedback.PURCHASE_FEEDBACK,
                PurchasePublicFeedback.PURCHASE_PUBLIC_FEEDBACK,
                RewardRecipAssign.REWARD_RECIP_ASSIGN,
                Subscription.SUBSCRIPTION,
                Trade.TRADE,
                Transaction.TRANSACTION,
                UnconfirmedTransaction.UNCONFIRMED_TRANSACTION,
                Version.VERSION);
    }
}
