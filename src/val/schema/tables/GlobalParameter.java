/*
 * This file is generated by jOOQ.
 */
package val.schema.tables;


import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import val.schema.Db;
import val.schema.Indexes;
import val.schema.Keys;
import val.schema.tables.records.GlobalParameterRecord;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.10.5"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class GlobalParameter extends TableImpl<GlobalParameterRecord> {

    /**
     * The reference instance of <code>DB.global_parameter</code>
     */
    public static final GlobalParameter GLOBAL_PARAMETER = new GlobalParameter();
    private static final long serialVersionUID = -450450583;
    /**
     * The column <code>DB.global_parameter.db_id</code>.
     */
    public final TableField<GlobalParameterRecord, Integer> DB_ID = createField("db_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");
    /**
     * The column <code>DB.global_parameter.id</code>.
     */
    public final TableField<GlobalParameterRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.BIGINT)), this, "");
    /**
     * The column <code>DB.global_parameter.transaction_id</code>.
     */
    public final TableField<GlobalParameterRecord, Long> TRANSACTION_ID = createField("transaction_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.BIGINT)), this, "");
    /**
     * The column <code>DB.global_parameter.value</code>.
     */
    public final TableField<GlobalParameterRecord, String> VALUE = createField("value", org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false).defaultValue(org.jooq.impl.DSL.field("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");
    /**
     * The column <code>DB.global_parameter.height</code>.
     */
    public final TableField<GlobalParameterRecord, Integer> HEIGHT = createField("height", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");
    /**
     * The column <code>DB.global_parameter.latest</code>.
     */
    public final TableField<GlobalParameterRecord, Boolean> LATEST = createField("latest", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("1", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * Create a <code>DB.global_parameter</code> table reference
     */
    public GlobalParameter() {
        this(DSL.name("global_parameter"), null);
    }

    /**
     * Create an aliased <code>DB.global_parameter</code> table reference
     */
    public GlobalParameter(String alias) {
        this(DSL.name(alias), GLOBAL_PARAMETER);
    }

    /**
     * Create an aliased <code>DB.global_parameter</code> table reference
     */
    public GlobalParameter(Name alias) {
        this(alias, GLOBAL_PARAMETER);
    }

    private GlobalParameter(Name alias, Table<GlobalParameterRecord> aliased) {
        this(alias, aliased, null);
    }

    private GlobalParameter(Name alias, Table<GlobalParameterRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GlobalParameterRecord> getRecordType() {
        return GlobalParameterRecord.class;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Db.DB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.GLOBAL_PARAMETER_IDX_GLOBAL_NAME, Indexes.GLOBAL_PARAMETER_PRIMARY, Indexes.GLOBAL_PARAMETER_UNIQ_ID_HEIGHT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<GlobalParameterRecord, Integer> getIdentity() {
        return Keys.IDENTITY_GLOBAL_PARAMETER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<GlobalParameterRecord> getPrimaryKey() {
        return Keys.KEY_GLOBAL_PARAMETER_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<GlobalParameterRecord>> getKeys() {
        return Arrays.<UniqueKey<GlobalParameterRecord>>asList(Keys.KEY_GLOBAL_PARAMETER_PRIMARY, Keys.KEY_GLOBAL_PARAMETER_UNIQ_ID_HEIGHT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GlobalParameter as(String alias) {
        return new GlobalParameter(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GlobalParameter as(Name alias) {
        return new GlobalParameter(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public GlobalParameter rename(String name) {
        return new GlobalParameter(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public GlobalParameter rename(Name name) {
        return new GlobalParameter(name, null);
    }
}
